import os
import time
from google import genai
from openai import OpenAI
from dotenv import load_dotenv
from rag_functions.pinecone_functions import query_db
import os
import json

with open("app\data\law_descriptions_bonitinho.json", "r") as file:
    law_descriptions = json.load(file)

load_dotenv()


def extrair_placa(mocked: bool = True):
    # Google Gemini API Key
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        raise ValueError("GEMINI_API_KEY n√£o definida no .env")

    # OpenAI API Key
    # client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    # if not client.api_key:
    #     raise ValueError("OPENAI_API_KEY n√£o definida no .env")

    # Inicializa cliente Gemini
    if not mocked:
        client = genai.Client(api_key=api_key)

        video_path = "/Users/infra/Documents/Adapta Challenge/projeto/apiFlask/flaskapi/app/data/ultrapassagens16s.mp4"

        # Upload do v√≠deo
        video_file = client.files.upload(file=video_path)
        file_name = video_file.name

        # Aguarda processamento
        while video_file.state.name == "PROCESSING":
            print("Aguardando processamento do v√≠deo...")
            time.sleep(2)
            video_file = client.files.get(name=file_name)

        # An√°lise com Gemini
        gemini_prompt = (
            "Gere uma descri√ß√£o do que aconteceu no v√≠deo. Leve em conta os detalhes, como de que forma "
            "a ultrapassagem foi feita, se era permitida naquele local (segundo sinaliza√ß√£o no piso, como faixa dupla cont√≠nua ou placa), "
            "e outros detalhes que possam ser importantes. Me d√™ tamb√©m a placa e modelo dos ve√≠culos identificados."
        )
        gemini_response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=[gemini_prompt, video_file]
        )
        gemini_text = gemini_response.text
    else:
        print("\n\n****** ENTROU NO MOCKED *********\n\n")
        gemini_text = get_gemini_response_mock()

    
    print("üîç Resposta do Gemini:\n", gemini_text)

    print("\n\n***************************************************************\n\n")

    final_output = interpretar_com_gpt(gemini_text=gemini_text)

    print("üìã An√°lise estruturada para infra√ß√µes:\n", final_output)

    print("\n\n***************************************************************\n\n")

    return final_output

def get_gemini_response_mock():
    return """"
    O v√≠deo, filmado em um dia chuvoso com pista molhada, mostra uma sequ√™ncia de ve√≠culos em uma rodovia de m√£o dupla, com uma faixa cont√≠nua dupla amarela no centro, indicando **proibi√ß√£o de ultrapassagem** para ambos os sentidos.

**Descri√ß√£o do que aconteceu:**

1.  **Cen√°rio Inicial:** O v√≠deo come√ßa com a vis√£o da perspectiva de um ve√≠culo (aparentemente um carro, filmando sobre outro carro que est√° √† frente), que est√° seguindo um comboio na rodovia. √Ä frente do ve√≠culo que est√° sendo filmado (um Toyota Corolla prata), h√° um caminh√£o-ba√∫ grande de cor branca, e √† frente deste, mais dois ve√≠culos (uma caminhonete escura e outra mais clara). A pista est√° visivelmente molhada e h√° pouca visibilidade devido √† chuva e neblina.
2.  **Tentativa de Ultrapassagem:** Por volta de 0:05, o Toyota Corolla prata, que est√° logo √† frente do ve√≠culo do cinegrafista, inicia uma manobra de ultrapassagem sobre o caminh√£o-ba√∫. Ele se desloca para a faixa de sentido contr√°rio, invadindo-a completamente.
3.  **Situa√ß√£o de Perigo:** Enquanto o Corolla est√° na contram√£o ao lado do caminh√£o, um ve√≠culo (um carro de cor clara) surge na pista no sentido contr√°rio.
4.  **Manobra de Abortagem:** O motorista do Corolla, percebendo a aproxima√ß√£o perigosa do ve√≠culo na contram√£o, √© for√ßado a abortar bruscamente a ultrapassagem. Ele freia e ester√ßa violentamente para a direita, retornando √† sua faixa original e evitando por pouco uma colis√£o tanto com o caminh√£o-ba√∫ (que ele quase atinge na traseira) quanto com o ve√≠culo que vinha no sentido contr√°rio.
5.  **Continua√ß√£o:** Ap√≥s a manobra arriscada, o Corolla se alinha novamente atr√°s do caminh√£o, e o comboio continua na estrada molhada. Outro ve√≠culo se aproxima no sentido contr√°rio logo em seguida.

**Detalhes Importantes:**

*   **Forma da Ultrapassagem:** A ultrapassagem foi feita pela esquerda, invadindo a faixa de rolamento do sentido contr√°rio.
*   **Permiss√£o no Local:** A ultrapassagem **n√£o era permitida** no local. A sinaliza√ß√£o de solo, uma **faixa dupla cont√≠nua amarela**, indica claramente a proibi√ß√£o de ultrapassagem para ambos os sentidos, conforme o C√≥digo de Tr√¢nsito Brasileiro. Al√©m disso, as condi√ß√µes clim√°ticas (chuva, pista molhada, baixa visibilidade) tornavam a manobra ainda mais perigosa, independentemente da sinaliza√ß√£o.
*   **Consequ√™ncias Imediatas:** A imprud√™ncia resultou em uma situa√ß√£o de alto risco, com a necessidade de uma manobra evasiva perigosa para evitar uma colis√£o m√∫ltipla.

---

**Identifica√ß√£o de Ve√≠culos:**

*   **Ve√≠culo que realiza a ultrapassagem (Sedan Prata):**
    *   **Modelo:** Toyota Corolla (gera√ß√£o 2014-2019, conhecida como modelo "Altis" ou "GLi" no Brasil).
    *   **Placa:** PCF 9041
*   **Caminh√£o-Ba√∫ (Grande, Branco):**
    *   **Modelo:** N√£o √© poss√≠vel identificar o modelo exato da cabine, mas o ba√∫ √© da empresa **"TRLog"** (com o site "www.tfr.com.br" vis√≠vel) e possui a marca **"RANDON"** (fabricante de implementos rodovi√°rios) vis√≠vel no para-lama traseiro.
    *   **Placa:** Partes da placa s√£o vis√≠veis (ex: "012-0436" por volta de 0:04), mas n√£o √© poss√≠vel ler a placa completa com clareza para identifica√ß√£o.
*   **Ve√≠culo do Cinegrafista:** N√£o √© poss√≠vel identificar o modelo ou a placa do ve√≠culo de onde o v√≠deo foi filmado, mas a perspectiva sugere que √© um carro, provavelmente um sedan, que segue de perto o Toyota Corolla.
    """

def interpretar_com_gpt(gemini_text: str, mock: bool = True) -> str:
    if not mock:
        client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        prompt = (
            "A seguir est√° uma descri√ß√£o textual de uma cena de tr√¢nsito analisada por IA:\n\n"
            f"{gemini_text}\n\n"
            "Com base nessa descri√ß√£o, extraia apenas informa√ß√µes relacionadas a ve√≠culos identific√°veis, estruturando da seguinte forma em um json que possua v√°rias poss√≠veis infra√ß√µes (uma lista):\n\n"
            "- Placa:\n"
            "- Modelo:\n"
            "- Cor:\n"
            "- Comportamento observado:\n"
            "- Poss√≠vel infra√ß√£o (sim/n√£o):\n\n"
            "Se houver m√∫ltiplos ve√≠culos, repita essa estrutura apenas para ve√≠culos que possuem poss√≠veis infra√ß√µes."
            "Me retorne APENAS o json sem os caracteres de markdown, pois estou integrando a sa√≠da diretamente em minha API!!!"
        )

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Voc√™ √© um assistente que identifica poss√≠veis infra√ß√µes de tr√¢nsito a partir de descri√ß√µes de v√≠deos."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3
        )

        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=["Gere uma descri√ß√£o do que aconteceu no v√≠deo. Leve em conta os detalhes, como de que forma a ultrapassagem foi feita, se era permitida naquele local (segundo sinaliza√ß√£o no piso, como faixa dupla cont√≠nua ou placa), e outros detalhes que possam ser importantes. Me de tamb√©m a placa e modelo dos ve√≠culos identificados", video_file]
        )

        nodes = query_db(
            query=response.choices[0].message.content,
            index_name="codigo-transito-brasileiro",
            top_k=1
        )

        law_reference = nodes[0].metadata['path']

        ticket = law_descriptions[law_reference]

        return {"analysis": response.choices[0].message.content, "ticket": ticket, "law-reference": law_reference}
    else:
        print("Entrou no mock")
        resposta_mock = """"
            [ { "Placa": "PCF 9041", "Modelo": "Toyota Corolla (gera√ß√£o 2014-2019)", "Cor": "Prata", "Comportamento observado": "Tentativa de ultrapassagem em local proibido, invadindo a faixa de sentido contr√°rio e realizando manobra evasiva perigosa.", "Poss√≠vel infra√ß√£o": "sim" } ]
        """
        return {resposta_mock, "ticket": None, "law-reference": law_reference}